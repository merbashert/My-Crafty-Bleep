{"ast":null,"code":"var _jsxFileName = \"/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/src/components/FabricPage.js\";\nimport React from 'react';\nimport FabricForm from './FabricForm';\nimport Fabric from './Fabrics';\n\nclass FabricPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        fabricTagFilter: e.target.value,\n        mainColorFilter: e.target.value\n      });\n    };\n\n    this.fetchFabric = () => {\n      fetch(`${this.props.baseUrl}/fabrics`).then(data => data.json()).then(jData => {\n        this.setState({\n          fabrics: jData\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.handleCreateFabric = createData => {\n      fetch(`${this.props.baseUrl}/fabrics`, {\n        body: JSON.stringify(createData),\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(createdFabric => {\n        return createdFabric.json();\n      }).then(json => {\n        this.setState({\n          fabrics: json\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.handleUpdateFabric = updateData => {\n      fetch(`${this.props.baseUrl}/fabrics/${updateData.id}`, {\n        body: JSON.stringify(updateData),\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(updatedFabric => {\n        this.fetchFabric();\n      }).catch(err => console.log(err));\n    };\n\n    this.handleDeleteFabric = id => {\n      fetch(`${this.props.baseUrl}/fabrics/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(json => {\n        this.setState({\n          fabrics: this.state.fabrics.filter(fabric => fabric.id !== id)\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.state = {\n      fabrics: [],\n      fabricTagFilter: ''\n    };\n  }\n\n  componentDidMount() {\n    //loads right after the page does\n    this.fetchFabric();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Add Fabric:\", React.createElement(FabricForm, {\n      handleCreateFabric: this.handleCreateFabric,\n      handleUpdateFabric: this.handleUpdateFabric,\n      formInputs: this.props.formInputs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"filter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Search for tag/color\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"filter\",\n      value: this.state.fabricTagFilter,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      id: \"main_color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Main Color:\", React.createElement(\"select\", {\n      value: this.state.mainColorFilter,\n      onChange: this.handleChange,\n      id: \"main_color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      main_color: \"all\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"all\"), React.createElement(\"option\", {\n      main_color: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"red\"), React.createElement(\"option\", {\n      main_color: \"orange\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"orange\"), React.createElement(\"option\", {\n      main_color: \"yellow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"yellow\"), React.createElement(\"option\", {\n      main_color: \"green\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"green\"), React.createElement(\"option\", {\n      main_color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"blue\"), React.createElement(\"option\", {\n      main_color: \"purple\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"purple\"), React.createElement(\"option\", {\n      main_color: \"pink\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"pink\"), React.createElement(\"option\", {\n      main_color: \"brown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"brown\"), React.createElement(\"option\", {\n      main_color: \"black\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"black\"), React.createElement(\"option\", {\n      main_color: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"white\"))), this.state.fabricTagFilter === '' || this.state.fabricTagFilter === 'all' ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.state.fabrics.map(fabricData => React.createElement(Fabric, {\n      key: fabricData.id,\n      fabricData: fabricData,\n      handleDeleteFabric: this.handleDeleteFabric,\n      handleUpdateFabric: this.handleUpdateFabric,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.state.fabrics.filter(fabric => {\n      return fabric.tags === this.state.fabricTagFilter || fabric.main_color === this.state.mainColorFilter;\n    }).map(fabricData => React.createElement(Fabric, {\n      key: fabricData.id,\n      fabricData: fabricData,\n      handleDeleteFabric: this.handleDeleteFabric,\n      handleUpdateFabric: this.handleUpdateFabric,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })))); //end of return\n  } //\n\n\n}\n\nexport default FabricPage;","map":{"version":3,"sources":["/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/src/components/FabricPage.js"],"names":["React","FabricForm","Fabric","FabricPage","Component","constructor","props","handleChange","e","setState","fabricTagFilter","target","value","mainColorFilter","fetchFabric","fetch","baseUrl","then","data","json","jData","fabrics","catch","err","console","log","handleCreateFabric","createData","body","JSON","stringify","method","headers","createdFabric","handleUpdateFabric","updateData","id","updatedFabric","handleDeleteFabric","state","filter","fabric","componentDidMount","render","formInputs","map","fabricData","tags","main_color"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport FabricForm from './FabricForm'\nimport Fabric from './Fabrics'\n\n\n\nclass FabricPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            fabrics: [],\n            fabricTagFilter: ''\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            fabricTagFilter: e.target.value,\n            mainColorFilter: e.target.value\n        })\n    }\n\n    // handleChangeTag = (e) => {\n    //     this.setState({\n    //         fabricTagFilter: e.target.value\n    //     })\n    // }\n    //\n    // handleChangeColor = (e) => {\n    //     this.setState({\n    //         mainColorFilter: e.target.value\n    //     })\n    // }\n\n    fetchFabric = () => {\n        fetch(`${this.props.baseUrl}/fabrics`)\n        .then(data => data.json())\n        .then(jData => {\n            this.setState({fabrics:jData})\n        }).catch(err=>console.log(err))\n    }\n\n    handleCreateFabric = (createData) => {\n        fetch(`${this.props.baseUrl}/fabrics`, {\n            body: JSON.stringify(createData),\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(createdFabric => {\n            return createdFabric.json()\n        })\n        .then(json => {\n            this.setState({\n                fabrics: json\n            })\n        })\n        .catch(err=>console.log(err))\n    }\n\n    handleUpdateFabric = (updateData) => {\n        fetch(`${this.props.baseUrl}/fabrics/${updateData.id}`, {\n            body: JSON.stringify(updateData),\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(updatedFabric => {\n            this.fetchFabric()\n        }).catch(err=>console.log(err))\n    }\n\n    handleDeleteFabric = (id) => {\n        fetch(`${this.props.baseUrl}/fabrics/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(json => {\n            this.setState({\n                fabrics: this.state.fabrics.filter(fabric => fabric.id !== id)\n\n            })\n        }).catch(err=>console.log(err))\n    }\n    componentDidMount(){//loads right after the page does\n        this.fetchFabric()\n    }\n\n    render() {\n        return (\n            <div>\n            Add Fabric:\n            <FabricForm\n            handleCreateFabric={this.handleCreateFabric}\n            handleUpdateFabric={this.handleUpdateFabric}\n            formInputs={this.props.formInputs}\n            />\n\n            <label htmlFor=\"filter\">Search for tag/color</label>\n            <input type=\"text\" id=\"filter\"\n            value={this.state.fabricTagFilter}\n            onChange={this.handleChange}/>\n\n            <label id=\"main_color\">\n            Main Color:\n            <select value={this.state.mainColorFilter} onChange={this.handleChange} id=\"main_color\">\n            <option main_color=\"all\">all</option>\n            <option main_color=\"red\">red</option>\n            <option main_color=\"orange\">orange</option>\n            <option main_color=\"yellow\">yellow</option>\n            <option main_color=\"green\">green</option>\n            <option main_color=\"blue\">blue</option>\n            <option main_color=\"purple\">purple</option>\n            <option main_color=\"pink\">pink</option>\n            <option main_color=\"brown\">brown</option>\n            <option main_color=\"black\">black</option>\n            <option main_color=\"white\">white</option>\n            </select>\n            </label>\n\n\n\n            {\n                (this.state.fabricTagFilter===''  || this.state.fabricTagFilter==='all')\n                ?\n                <div>\n                {this.state.fabrics.map((fabricData) => (\n                    <Fabric\n                    key={fabricData.id}\n                    fabricData={fabricData}\n                    handleDeleteFabric={this.handleDeleteFabric}\n                    handleUpdateFabric={this.handleUpdateFabric}\n                    />\n\n                ))}</div>\n                :\n                <div>\n                {this.state.fabrics.filter(fabric=>{\n                    return fabric.tags === this.state.fabricTagFilter || fabric.main_color === this.state.mainColorFilter\n                }).map((fabricData) => (\n                    <Fabric\n                    key={fabricData.id}\n                    fabricData={fabricData}\n                    handleDeleteFabric={this.handleDeleteFabric}\n                    handleUpdateFabric={this.handleUpdateFabric}\n                    />\n                ))}\n                </div>\n            }\n\n\n\n\n            </div>\n        )//end of return\n    }//\n\n\n}\n\nexport default FabricPage\n"]},"metadata":{},"sourceType":"module"}