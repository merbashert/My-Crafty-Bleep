{"ast":null,"code":"import _slicedToArray from \"/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/src/components/NeedlePage.js\";\nimport React, { useState, useEffect } from 'react';\nimport Needle from './Needles';\n\nconst NeedlePage = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        needles = _useState2[0],\n        setNeedles = _useState2[1];\n\n  const fetchNeedle = () => {\n    fetch(`${props.baseUrl}/needles`).then(data => data.json()).then(jData => {\n      setNeedles(jData);\n    }).catch(err => console.log(err));\n  };\n\n  const handleUpdateNeedle = updateData => {\n    fetch(`${props.baseUrl}/needles/${updateData.id}`, {\n      body: JSON.stringify(updateData),\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(updatedNeedle => {\n      fetchNeedle();\n    }).catch(err => console.log(err));\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"needles\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, needles.map(needleData => React.createElement(Needle, {\n    key: needleData.id,\n    needleData: needleData,\n    handleDeleteNeedle: handleDeleteNeedle,\n    handleUpdateNeedle: handleUpdateNeedle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }))));\n};\n\nexport default NeedlePage;","map":{"version":3,"sources":["/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/src/components/NeedlePage.js"],"names":["React","useState","useEffect","Needle","NeedlePage","props","needles","setNeedles","fetchNeedle","fetch","baseUrl","then","data","json","jData","catch","err","console","log","handleUpdateNeedle","updateData","id","body","JSON","stringify","method","headers","updatedNeedle","map","needleData","handleDeleteNeedle"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,MAAP,MAAmB,WAAnB;;AAIA,MAAMC,UAAU,GAAEC,KAAK,IAAI;AAAA,oBACOJ,QAAQ,CAAC,EAAD,CADf;AAAA;AAAA,QAChBK,OADgB;AAAA,QACPC,UADO;;AAGvB,QAAMC,WAAW,GAAG,MAAM;AACtBC,IAAAA,KAAK,CAAE,GAAEJ,KAAK,CAACK,OAAQ,UAAlB,CAAL,CACCC,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMG,KAAK,IAAI;AACXP,MAAAA,UAAU,CAACO,KAAD,CAAV;AACH,KAJD,EAIGC,KAJH,CAISC,GAAG,IAAEC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAJd;AAKH,GAND;;AAQA,QAAMG,kBAAkB,GAAIC,UAAD,IAAgB;AACvCX,IAAAA,KAAK,CAAE,GAAEJ,KAAK,CAACK,OAAQ,YAAWU,UAAU,CAACC,EAAG,EAA3C,EAA8C;AAC/CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,UAAf,CADyC;AAE/CK,MAAAA,MAAM,EAAE,KAFuC;AAG/CC,MAAAA,OAAO,EAAE;AACL,kBAAU,mCADL;AAEL,wBAAgB;AAFX;AAHsC,KAA9C,CAAL,CAOGf,IAPH,CAOQgB,aAAa,IAAI;AACrBnB,MAAAA,WAAW;AACd,KATD,EASGO,KATH,CASSC,GAAG,IAAEC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CATd;AAUH,GAXD;;AAaA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA;AAAK,IAAA,SAAS,EAAG,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCV,OAAO,CAACsB,GAAR,CAAaC,UAAD,IACT,oBAAC,MAAD;AACA,IAAA,GAAG,EAAEA,UAAU,CAACR,EADhB;AAEA,IAAA,UAAU,EAAEQ,UAFZ;AAGA,IAAA,kBAAkB,EAAEC,kBAHpB;AAIA,IAAA,kBAAkB,EAAEX,kBAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADD,CAFA,CADJ;AAgBH,CAxCD;;AA0CA,eAAef,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport Needle from './Needles'\n\n\n\nconst NeedlePage= props => {\n    const [needles, setNeedles] = useState([])\n\n    const fetchNeedle = () => {\n        fetch(`${props.baseUrl}/needles`)\n        .then(data => data.json())\n        .then(jData => {\n            setNeedles(jData)\n        }).catch(err=>console.log(err))\n    }\n\n    const handleUpdateNeedle = (updateData) => {\n        fetch(`${props.baseUrl}/needles/${updateData.id}`, {\n            body: JSON.stringify(updateData),\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(updatedNeedle => {\n            fetchNeedle()\n        }).catch(err=>console.log(err))\n    }\n\n    return (\n        <React.Fragment>\n\n        <div className = \"needles\">\n        {needles.map((needleData) => (\n            <Needle\n            key={needleData.id}\n            needleData={needleData}\n            handleDeleteNeedle={handleDeleteNeedle}\n            handleUpdateNeedle={handleUpdateNeedle}\n            />\n        ))}\n        </div>\n\n        </React.Fragment>\n    )\n}\n\nexport default NeedlePage\n"]},"metadata":{},"sourceType":"module"}