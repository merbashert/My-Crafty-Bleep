{"ast":null,"code":"var _jsxFileName = \"/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/src/components/FabricPage.js\";\nimport React from 'react';\nimport FabricForm from './FabricForm';\nimport Fabric from './Fabrics';\n\nclass FabricPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchFabric = () => {\n      fetch(`${this.props.baseUrl}/fabrics`).then(data => data.json()).then(jData => {\n        this.setState({\n          fabrics: jData\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.handleCreateFabric = createData => {\n      fetch(`${this.props.baseUrl}/fabrics`, {\n        body: JSON.stringify(createData),\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(createdFabric => {\n        return createdFabric.json();\n      }).then(json => {\n        this.setState({\n          fabrics: json\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.handleUpdateFabric = updateData => {\n      fetch(`${this.props.baseUrl}/fabrics/${updateData.id}`, {\n        body: JSON.stringify(updateData),\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(updatedFabric => {\n        this.fetchFabric();\n      }).catch(err => console.log(err));\n    };\n\n    this.handleDeleteFabric = id => {\n      fetch(`${this.props.baseUrl}/fabrics/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(json => {\n        this.setState({\n          fabrics: this.state.fabrics.filter(fabric => fabric.id !== id)\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.state = {\n      fabrics: []\n    };\n  }\n\n  componentDidMount() {\n    //loads right after the page does\n    this.fetchFabric();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(FabricForm, {\n      handleCreateFabric: this.handleCreateFabric,\n      formInputs: this.props.formInputs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), this.state.fabrics.map(fabricData => React.createElement(Fabric, {\n      key: fabricData.id,\n      fabricData: fabricData,\n      handleDeleteFabric: this.handleDeleteFabric,\n      handleUpdateFabric: this.handleUpdateFabric,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default FabricPage;","map":{"version":3,"sources":["/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/src/components/FabricPage.js"],"names":["React","FabricForm","Fabric","FabricPage","Component","constructor","props","fetchFabric","fetch","baseUrl","then","data","json","jData","setState","fabrics","catch","err","console","log","handleCreateFabric","createData","body","JSON","stringify","method","headers","createdFabric","handleUpdateFabric","updateData","id","updatedFabric","handleDeleteFabric","state","filter","fabric","componentDidMount","render","formInputs","map","fabricData"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport FabricForm from './FabricForm'\nimport Fabric from './Fabrics'\n\n\n\nclass FabricPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            fabrics: []\n        }\n    }\n\n    fetchFabric = () => {\n        fetch(`${this.props.baseUrl}/fabrics`)\n        .then(data => data.json())\n        .then(jData => {\n            this.setState({fabrics:jData})\n        }).catch(err=>console.log(err))\n    }\n\n    handleCreateFabric = (createData) => {\n        fetch(`${this.props.baseUrl}/fabrics`, {\n            body: JSON.stringify(createData),\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(createdFabric => {\n            return createdFabric.json()\n        })\n        .then(json => {\n            this.setState({\n                fabrics: json\n            })\n        })\n        .catch(err=>console.log(err))\n    }\n\n    handleUpdateFabric = (updateData) => {\n        fetch(`${this.props.baseUrl}/fabrics/${updateData.id}`, {\n            body: JSON.stringify(updateData),\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(updatedFabric => {\n            this.fetchFabric()\n        }).catch(err=>console.log(err))\n    }\n\n    handleDeleteFabric = (id) => {\n        fetch(`${this.props.baseUrl}/fabrics/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(json => {\n            this.setState({\n                fabrics: this.state.fabrics.filter(fabric => fabric.id !== id)\n\n            })\n        }).catch(err=>console.log(err))\n    }\n    componentDidMount(){//loads right after the page does\n        this.fetchFabric()\n    }\n\nrender() {\n    return (\n        <div>\n        <FabricForm\n        handleCreateFabric={this.handleCreateFabric}\n        formInputs={this.props.formInputs}\n\n        />\n        {this.state.fabrics.map((fabricData) => (\n            <Fabric\n            key={fabricData.id}\n            fabricData={fabricData}\n            handleDeleteFabric={this.handleDeleteFabric}\n            handleUpdateFabric={this.handleUpdateFabric}\n            />\n    ))}\n\n        </div>\n    )\n}\n\n\n}\n\nexport default FabricPage\n"]},"metadata":{},"sourceType":"module"}