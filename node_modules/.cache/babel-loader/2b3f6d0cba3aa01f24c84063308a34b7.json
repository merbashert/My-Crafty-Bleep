{"ast":null,"code":"import _slicedToArray from \"/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/src/components/RandomPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport RandomFind from './RandomFind';\nimport RandomForm from './RandomForm';\nimport Random from './Random';\nimport box_picture1 from '../assets/box1.png';\nimport box_picture2 from '../assets/box2.png';\nimport box_picture3 from '../assets/box3.png';\n\nconst RandomPage = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        randoms = _useState2[0],\n        setRandoms = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        randomFilter = _useState4[0],\n        setRandomFilter = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        boxNumberFilter = _useState6[0],\n        setBoxNumberFilter = _useState6[1];\n\n  const _white = 'white',\n        _white2 = _slicedToArray(_white, 2),\n        backgroundColor = _white2[0],\n        setBackgroundColor = _white2[1];\n\n  const handleChange = e => {\n    setRandomFilter(e.target.value);\n  };\n\n  const setBackgroundColorFunction = e => {\n    e.setBackgroundColor('red');\n  };\n\n  const fetchRandom = () => {\n    fetch(`${props.baseUrl}/randoms`).then(data => data.json()).then(jData => {\n      setRandoms(jData);\n    }).catch(err => console.log(err));\n  };\n\n  const handleCreateRandom = createData => {\n    fetch(`${props.baseUrl}/randoms`, {\n      body: JSON.stringify(createData),\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(createdRandom => {\n      return createdRandom.json();\n    }).then(json => {\n      setRandoms(json);\n    }).catch(err => console.log(err));\n  };\n\n  const handleUpdateRandom = updateData => {\n    fetch(`${props.baseUrl}/randoms/${updateData.id}`, {\n      body: JSON.stringify(updateData),\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(updatedRandom => {\n      fetchRandom();\n    }).catch(err => console.log(err));\n  };\n\n  const handleDeleteRandom = id => {\n    fetch(`${props.baseUrl}/randoms/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(json => {\n      setRandoms(randoms.filter(random => random.id !== id));\n    }).catch(err => console.log(err));\n  };\n\n  const setBox = boxNumber => {\n    setBoxNumberFilter(boxNumber);\n    setBackgroundColorFunction(boxNumber);\n  };\n\n  useEffect(() => {\n    fetchRandom();\n  }, []);\n  console.log(backgroundColor);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"random-add\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(RandomForm, {\n    handleCreateRandom: handleCreateRandom,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"search-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"search-terms\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"filter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Search for item\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"filter\",\n    value: randomFilter,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"results\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, randoms.filter(random => {\n    return random.name === randomFilter;\n  }).map(randomData => React.createElement(RandomFind, {\n    key: randomData.id,\n    randomData: randomData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"random-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: box_picture1,\n    alt: \"box 1\",\n    onClick: () => setBox('1'),\n    className: \"boxpicture\",\n    id: \"1\",\n    style: {\n      backgroundColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    src: box_picture2,\n    alt: \"box 2\",\n    onClick: () => setBox('2'),\n    className: \"boxpicture\",\n    id: \"2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    src: box_picture3,\n    alt: \"box 3\",\n    onClick: () => setBox('3'),\n    className: \"boxpicture\",\n    id: \"3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), boxNumberFilter ? React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Box \", boxNumberFilter) : null, React.createElement(Table, {\n    className: \"random-table\",\n    size: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, randoms.filter(random => {\n    return random.box_number === boxNumberFilter;\n  }).map(randomData => React.createElement(Random, {\n    key: randomData.id,\n    randomData: randomData,\n    handleUpdateRandom: handleUpdateRandom,\n    handleDeleteRandom: handleDeleteRandom,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }))))));\n};\n\nexport default RandomPage;","map":{"version":3,"sources":["/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/src/components/RandomPage.js"],"names":["React","useState","useEffect","Table","RandomFind","RandomForm","Random","box_picture1","box_picture2","box_picture3","RandomPage","props","randoms","setRandoms","randomFilter","setRandomFilter","boxNumberFilter","setBoxNumberFilter","backgroundColor","setBackgroundColor","handleChange","e","target","value","setBackgroundColorFunction","fetchRandom","fetch","baseUrl","then","data","json","jData","catch","err","console","log","handleCreateRandom","createData","body","JSON","stringify","method","headers","createdRandom","handleUpdateRandom","updateData","id","updatedRandom","handleDeleteRandom","filter","random","setBox","boxNumber","name","map","randomData","box_number"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Table from 'react-bootstrap/Table';\n\nimport RandomFind from './RandomFind'\nimport RandomForm from './RandomForm'\nimport Random from './Random'\nimport box_picture1 from '../assets/box1.png'\nimport box_picture2 from '../assets/box2.png'\nimport box_picture3 from '../assets/box3.png'\n\n\nconst RandomPage = props => {\n    const[randoms, setRandoms] = useState([])\n    const[randomFilter, setRandomFilter] = useState('')\n    const[boxNumberFilter, setBoxNumberFilter] = useState('')\n    const[backgroundColor, setBackgroundColor] = ('white')\n\n\n    const handleChange = (e) => {\n        setRandomFilter(e.target.value)\n    }\n\n    const setBackgroundColorFunction = (e) => {\n        e.setBackgroundColor('red')\n    }\n\n    const fetchRandom = () => {\n        fetch(`${props.baseUrl}/randoms`)\n        .then(data => data.json())\n        .then(jData => {\n            setRandoms(jData)\n        }).catch(err=>console.log(err))\n    }\n\n    const handleCreateRandom = (createData) => {\n        fetch(`${props.baseUrl}/randoms`, {\n            body: JSON.stringify(createData),\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(createdRandom => {\n            return createdRandom.json()\n        })\n        .then(json => {\n            setRandoms(json)\n\n        })\n        .catch(err=>console.log(err))\n    }\n\n    const handleUpdateRandom = (updateData) => {\n        fetch(`${props.baseUrl}/randoms/${updateData.id}`, {\n            body: JSON.stringify(updateData),\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(updatedRandom => {\n            fetchRandom()\n        }).catch(err=>console.log(err))\n    }\n\n    const handleDeleteRandom = (id) => {\n        fetch(`${props.baseUrl}/randoms/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(json => {\n            setRandoms(randoms.filter(random => random.id !== id))\n        }).catch(err=>console.log(err))\n    }\n\n    const setBox = (boxNumber) => {\n        setBoxNumberFilter(boxNumber)\n        setBackgroundColorFunction(boxNumber)\n    }\n\n    useEffect(() => {\n        fetchRandom();\n    }, [])\n\nconsole.log(backgroundColor);\n    return (\n        <>\n        <div className=\"random-add\">\n        <RandomForm\n        handleCreateRandom={handleCreateRandom}\n        />\n        </div>\n        <div className=\"search-box\">\n        <div className=\"search-terms\">\n        <label htmlFor=\"filter\">Search for item</label>\n        <input type=\"text\" id=\"filter\"\n        value={randomFilter}\n        onChange={handleChange}/>\n        </div>\n\n        <div className=\"results\">\n        {randoms.filter(random=>{\n            return random.name === randomFilter\n        }).map((randomData) => (\n            <RandomFind\n            key={randomData.id}\n            randomData={randomData}\n            />\n        ))}\n        </div>\n        </div>\n\n        <div className=\"random-box\">\n        <img src={box_picture1} alt=\"box 1\" onClick={() => setBox('1')} className='boxpicture' id='1' style={{backgroundColor}}/>\n        <img src={box_picture2} alt=\"box 2\" onClick={() => setBox('2')} className='boxpicture'id='2'/>\n        <img src={box_picture3} alt=\"box 3\" onClick={() => setBox('3')} className='boxpicture'id='3'/>\n\n        {boxNumberFilter?<h1>Box {boxNumberFilter}</h1>:null}\n\n        <Table className=\"random-table\" size=\"sm\">\n        <tbody>\n        {randoms.filter(random=>{\n            return random.box_number === boxNumberFilter\n        }).map((randomData) => (\n            <Random\n            key={randomData.id}\n            randomData={randomData}\n            handleUpdateRandom={handleUpdateRandom}\n            handleDeleteRandom={handleDeleteRandom}\n            />\n\n        ))}\n        </tbody>\n        </Table>\n        </div>\n        </>\n    )\n}\n\nexport default RandomPage\n"]},"metadata":{},"sourceType":"module"}