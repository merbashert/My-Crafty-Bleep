{"ast":null,"code":"import _slicedToArray from \"/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/src/components/FabricPage.js\";\nimport React, { useState } from 'react';\nimport FabricForm from './FabricForm';\nimport Fabric from './Fabrics';\n\nconst FabricPage = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        fabrics = _useState2[0],\n        setFabrics = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        fabricTagFilter = _useState4[0],\n        setFabricTagFilter = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        mainColorFilter = _useState6[0],\n        setMainColorFilter = _useState6[1];\n\n  const handleChange = e => {\n    setFabricTagFilter(e.target.value);\n    setMainColorFilter(e.target.value);\n  }; // handleChangeTag = (e) => {\n  //     setFabricTagFilter(e.target.value)\n  // }\n  //\n  // handleChangeColor = (e) => {\n  //     setMainColorFilter(e.target.value)\n  // }\n\n\n  const fetchFabric = () => {\n    fetch(`${props.baseUrl}/fabrics`).then(data => data.json()).then(jData => {\n      setFabrics(jData);\n    }).catch(err => console.log(err));\n  };\n\n  const handleCreateFabric = createData => {\n    fetch(`${props.baseUrl}/fabrics`, {\n      body: JSON.stringify(createData),\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(createdFabric => {\n      return createdFabric.json();\n    }).then(json => {\n      setFabrics(json);\n    }).catch(err => console.log(err));\n  };\n\n  const handleUpdateFabric = updateData => {\n    fetch(`${props.baseUrl}/fabrics/${updateData.id}`, {\n      body: JSON.stringify(updateData),\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(updatedFabric => {\n      fetchFabric();\n    }).catch(err => console.log(err));\n  };\n\n  const handleDeleteFabric = id => {\n    fetch(`${props.baseUrl}/fabrics/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(json => {\n      setFabrics(fabrics.filter(fabric => fabric.id !== id));\n    }).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    fetchFabric();\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Add Fabric:\", React.createElement(FabricForm, {\n    handleCreateFabric: handleCreateFabric,\n    handleUpdateFabric: handleUpdateFabric,\n    formInputs: props.formInputs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"filter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Search for tag/color\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"filter\",\n    value: state.fabricTagFilter,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    id: \"main_color\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Main Color:\", React.createElement(\"select\", {\n    value: this.state.mainColorFilter,\n    onChange: this.handleChange,\n    id: \"main_color\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    main_color: \"all\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"all\"), React.createElement(\"option\", {\n    main_color: \"red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"red\"), React.createElement(\"option\", {\n    main_color: \"orange\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"orange\"), React.createElement(\"option\", {\n    main_color: \"yellow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"yellow\"), React.createElement(\"option\", {\n    main_color: \"green\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"green\"), React.createElement(\"option\", {\n    main_color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"blue\"), React.createElement(\"option\", {\n    main_color: \"purple\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"purple\"), React.createElement(\"option\", {\n    main_color: \"pink\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"pink\"), React.createElement(\"option\", {\n    main_color: \"brown\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"brown\"), React.createElement(\"option\", {\n    main_color: \"black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"black\"), React.createElement(\"option\", {\n    main_color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"white\"))), state.fabricTagFilter === '' || state.fabricTagFilter === 'all' ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, state.fabrics.map(fabricData => React.createElement(Fabric, {\n    key: fabricData.id,\n    fabricData: fabricData,\n    handleDeleteFabric: this.handleDeleteFabric,\n    handleUpdateFabric: this.handleUpdateFabric,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, this.state.fabrics.filter(fabric => {\n    return fabric.tags === this.state.fabricTagFilter || fabric.main_color === this.state.mainColorFilter;\n  }).map(fabricData => React.createElement(Fabric, {\n    key: fabricData.id,\n    fabricData: fabricData,\n    handleDeleteFabric: this.handleDeleteFabric,\n    handleUpdateFabric: this.handleUpdateFabric,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })))); //end of return\n};\n\nexport default FabricPage;","map":{"version":3,"sources":["/Users/merbashert/Desktop/Coding/Final_Project/mycraftybleep-front/crafty_app/src/components/FabricPage.js"],"names":["React","useState","FabricForm","Fabric","FabricPage","props","fabrics","setFabrics","fabricTagFilter","setFabricTagFilter","mainColorFilter","setMainColorFilter","handleChange","e","target","value","fetchFabric","fetch","baseUrl","then","data","json","jData","catch","err","console","log","handleCreateFabric","createData","body","JSON","stringify","method","headers","createdFabric","handleUpdateFabric","updateData","id","updatedFabric","handleDeleteFabric","filter","fabric","useEffect","formInputs","state","map","fabricData","tags","main_color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport FabricForm from './FabricForm'\nimport Fabric from './Fabrics'\n\n\n\nconst FabricPage = props => {\n\n    const[fabrics, setFabrics] = useState([])\n    const [fabricTagFilter, setFabricTagFilter] = useState('')\n    const [mainColorFilter, setMainColorFilter] = useState('')\n\n    const handleChange = (e) => {\n        setFabricTagFilter(e.target.value)\n        setMainColorFilter(e.target.value)\n    }\n\n    // handleChangeTag = (e) => {\n    //     setFabricTagFilter(e.target.value)\n    // }\n    //\n    // handleChangeColor = (e) => {\n    //     setMainColorFilter(e.target.value)\n    // }\n\n    const fetchFabric = () => {\n        fetch(`${props.baseUrl}/fabrics`)\n        .then(data => data.json())\n        .then(jData => {\n            setFabrics(jData)\n        }).catch(err=>console.log(err))\n    }\n\n    const handleCreateFabric = (createData) => {\n        fetch(`${props.baseUrl}/fabrics`, {\n            body: JSON.stringify(createData),\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(createdFabric => {\n            return createdFabric.json()\n        })\n        .then(json => {\n            setFabrics(json)\n        })\n        .catch(err=>console.log(err))\n    }\n\n    const handleUpdateFabric = (updateData) => {\n        fetch(`${props.baseUrl}/fabrics/${updateData.id}`, {\n            body: JSON.stringify(updateData),\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(updatedFabric => {\n            fetchFabric()\n        }).catch(err=>console.log(err))\n    }\n\n    const handleDeleteFabric = (id) => {\n        fetch(`${props.baseUrl}/fabrics/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(json => {\n            setFabrics(fabrics.filter(fabric => fabric.id !== id))\n        }).catch(err=>console.log(err))\n    }\n    useEffect(() => {\n        fetchFabric();\n    })\n\n\n    return (\n        <div>\n        Add Fabric:\n        <FabricForm\n        handleCreateFabric={handleCreateFabric}\n        handleUpdateFabric={handleUpdateFabric}\n        formInputs={props.formInputs}\n        />\n\n        <label htmlFor=\"filter\">Search for tag/color</label>\n        <input type=\"text\" id=\"filter\"\n        value={state.fabricTagFilter}\n        onChange={handleChange}/>\n\n        <label id=\"main_color\">\n        Main Color:\n        <select value={this.state.mainColorFilter} onChange={this.handleChange} id=\"main_color\">\n        <option main_color=\"all\">all</option>\n        <option main_color=\"red\">red</option>\n        <option main_color=\"orange\">orange</option>\n        <option main_color=\"yellow\">yellow</option>\n        <option main_color=\"green\">green</option>\n        <option main_color=\"blue\">blue</option>\n        <option main_color=\"purple\">purple</option>\n        <option main_color=\"pink\">pink</option>\n        <option main_color=\"brown\">brown</option>\n        <option main_color=\"black\">black</option>\n        <option main_color=\"white\">white</option>\n        </select>\n        </label>\n\n\n\n        {\n            (state.fabricTagFilter===''  || state.fabricTagFilter==='all')\n            ?\n            <div>\n            {state.fabrics.map((fabricData) => (\n                <Fabric\n                key={fabricData.id}\n                fabricData={fabricData}\n                handleDeleteFabric={this.handleDeleteFabric}\n                handleUpdateFabric={this.handleUpdateFabric}\n                />\n\n            ))}</div>\n            :\n            <div>\n            {this.state.fabrics.filter(fabric=>{\n                return fabric.tags === this.state.fabricTagFilter || fabric.main_color === this.state.mainColorFilter\n            }).map((fabricData) => (\n                <Fabric\n                key={fabricData.id}\n                fabricData={fabricData}\n                handleDeleteFabric={this.handleDeleteFabric}\n                handleUpdateFabric={this.handleUpdateFabric}\n                />\n            ))}\n            </div>\n        }\n\n\n\n\n        </div>\n    )//end of return\n}\n\nexport default FabricPage\n"]},"metadata":{},"sourceType":"module"}